import {
  createApiRef,
  DiscoveryApi,
  FetchApi,
} from '@backstage/core-plugin-api';
import { Question, Tag, User, PaginatedResponse } from '../api';

export const stackoverflowteamsApiRef = createApiRef<StackOverflowAPI>({
  id: 'plugin.stackoverflowteams.api',
});

type ApiResponse<T> = PaginatedResponse<T>;

interface BaseUrlResponse {
  SOInstance: string
}

export interface StackOverflowAPI {
  getQuestions(): Promise<ApiResponse<Question>>;
  getTags(): Promise<ApiResponse<Tag>>;
  getUsers(): Promise<ApiResponse<User>>;
  getMe() : Promise<User>
  getBaseUrl() : Promise<string>
  postQuestion(
    title: string,
    body: string,
    tags: string[],
  ): Promise<Question>;
  startAuth(): Promise<string>;
  completeAuth(code: string, state: string): Promise<void>;
  getAuthStatus: () => Promise<boolean>;
  logout: () => Promise<boolean>;
}

export const createStackOverflowApi = (
  discoveryApi: DiscoveryApi,
  fetchApi: FetchApi,
): StackOverflowAPI => {
  const getBaseUrl = async () =>
    await discoveryApi.getBaseUrl('stack-overflow-teams');

  const authenticate = async (
    endpoint: string,
    params?: string[],
    method?: 'POST' | 'GET',
  ) => {
    const queryString = params ? `?${params.join('&')}` : '';
    const url = `${await getBaseUrl()}/${endpoint}${queryString}`;
    const response = await fetchApi.fetch(url, {
      method: method ? method : 'GET',
      credentials: 'include',
    });

    if (!response.ok) {
      throw new Error(`Authentication failed at ${endpoint}`);
    }
    return response.json();
  };

  const postAPI = async <T>(
    endpoint: string,
    body: Record<string, unknown>,
  ): Promise<T> => {
    const url = `${await getBaseUrl()}/${endpoint}`;
    const response = await fetchApi.fetch(url, {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(body),
    });

    if (!response.ok) {
      throw new Error(
        `Failed to post to ${endpoint} (${
          response.status
        }): ${await response.text()}`,
      );
    }

    return response.json();
  };

  const fetchAPI = async <T>(endpoint: string): Promise<T> => {
    const url = `${await getBaseUrl()}/${endpoint}`;
    const response = await fetchApi.fetch(url);

    if (!response.ok) {
      throw new Error(
        `Failed to fetch ${endpoint} (${response.status}): ${response.statusText}`,
      );
    }

    return response.json();
  };

  return {
    // Read actions, they use stackoverflow.apiAccessToken
    getQuestions: () => fetchAPI<ApiResponse<Question>>('questions'),
    getTags: () => fetchAPI<ApiResponse<Tag>>('tags'),
    getUsers: () => fetchAPI<ApiResponse<User>>('users'),
    getMe: () => authenticate('me'),
    getBaseUrl: async () => {
      const response = await fetchAPI<BaseUrlResponse>('baseurl')
      const baseUrl = response.SOInstance
      return baseUrl
    },

    // Write actions, they use accessToken specific to the user, generated by OAuth authentication
    postQuestion: (title: string, body: string, tags: string[]) =>
      postAPI<Question>('questions', { title, body, tags }),

    // Authentication, to create an access token specific to the user
    startAuth: async () => {
      const data = await authenticate('auth/start');
      return data.authUrl;
    },
    completeAuth: async (code: string, state: string) => {
      await authenticate('callback', [
        `code=${encodeURIComponent(code)}`,
        `state=${encodeURIComponent(state)}`,
      ]);
    },
    getAuthStatus: async (): Promise<boolean> => {
      try {
        await authenticate('authStatus');
        return true;
      } catch (error) {
        if (error instanceof Error && error.message.includes('401')) {
          return false;
        }
        console.error('Error checking authentication status:', error);
        return false;
      }
    },

    logout: async (): Promise<boolean> => {
      try {
        const response = await authenticate('logout', undefined, 'POST');
        if (response.ok) {
          return true;
        } else {
          console.error('Logout failed with status:', response.status);
          return false;
        }
      } catch (error) {
        console.error('Error while logging out', error);
        return false;
      }
    },
  };
};
